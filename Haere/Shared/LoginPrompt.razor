@using System;
@inject NotifierService Notifier
@inject IJSRuntime JSRuntime;

@if(IsVisible)
{
    <div class="dialog">
        <h3>Sign in to Haere</h3>
        <p>Please enter your WebID or the URL of your identity provider</p>
        <select aria-label="Authentication provider options" @onchange="PickProvider">
            <option value="inrupt.net">https://inrupt.net</option>
            <option value="solid.community">https://solid.community</option>
        </select>
        <input type="text" placeholder="Name">
        <input type="password" placeholder="Password">
        <button type="button" @onclick="TryLogin">Sign in</button>
    </div>
}

<p>Your card is @WebId.</p>
<button type="button" @onclick="GetName">Get Name</button>

@code {

    private string SelectedProvider = "";
    private string WebId = "";

    public bool IsVisible { get; set; }

    private void PickProvider(ChangeEventArgs eventArgs)
    {
        string value = eventArgs.Value.ToString();
        SelectedProvider = value;
    }

    protected override void OnInitialized()
    {
        Notifier.Notify += OnNotify;
    }

    public async Task OnNotify(bool Visible)
    {
        await InvokeAsync(() =>
        {
            //lastNotification = (key, value);
            IsVisible = Visible;
            StateHasChanged();
        });
    }

    private async Task TryLogin(){
        //var identityProvider = "https://solid.community/";
        string identityProvider = $"https://{SelectedProvider}/";

        var response = await JSRuntime.InvokeAsync<string>("HaereLib.GetIdentityProvider", identityProvider);
        WebId = response;

        await JSRuntime.InvokeAsync<string>("HaereLib.WriteSession", "webId", response);
        
        //await GetName();
    }

    private async Task GetName(){
        var existingId = await JSRuntime.InvokeAsync<string>("HaereLib.ReadSession", "webId");
        
        if (!String.IsNullOrEmpty(existingId))
        {
            var result = await JSRuntime.InvokeAsync<string>("HaereLib.GetName", existingId);
        }
    }

    public void Dispose()
    {
        Notifier.Notify -= OnNotify;
    }
}